#!/usr/bin/env perl -w

##############################################################################
# File   : dropsync
# Author : Guillaume-Jean Herbiet  <guillaume-jean@herbiet.net>
#
#
# Copyright (c) 2009 Guillaume-Jean Herbiet     (http://herbiet.net)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Guillaume-Jean Herbiet
# <guillaume-jean@herbiet.net>
#
##############################################################################
use strict;
use warnings;

#-----------------------------------------------------------------------------
# Load aditional packages
#
use Getopt::Long;					# To easily retrieve arguments from command-line
use Term::ANSIColor qw(:constants);	# Colored output for the terminal
use YAML;							# To parse the config file
use Data::Dumper;					# Dump data structues (mainly used for debug)

#-----------------------------------------------------------------------------

#-----------------------------------------------------------------------------
# Log and debug
#
sub say 	{ print @_, "\n"; }
sub ohai	{ say BOLD, BLUE,	"==> ", RESET, @_;}
sub oops	{ say BOLD, YELLOW,	"/!\\ ",RESET, @_;}
sub fail	{ say BOLD, RED,	"!!! ", RESET, @_;}

#-----------------------------------------------------------------------------

#-----------------------------------------------------------------------------
# Global variables
#
my %OPTIONS;						# Hash of passed options
my $OPTIONS_VALID;					# Are the passed options valid ?
my @ARGS = @ARGV;					# Array of passed options
my $COMMAND = `basename $0`;		# Name of the script
chomp($COMMAND);
my $VERSION = "0.0a";				# Version of this script

#
# Generic variables
#
my $VERBOSE = 0;					# Verbose mode
my $DEBUG = 0;						# Debug mode

#
# Script specific variables
#
my $config_file = $ENV{'HOME'}."/.dropsyncrc.yaml";	# Default location of config file
my $config;

my $dropbox_location = $ENV{'HOME'}."/Dropbox";
my $dropsync_folder = "dropsync";

#-----------------------------------------------------------------------------

#-----------------------------------------------------------------------------
# Get passed arguments and check for validity.
#
$OPTIONS_VALID = GetOptions(
	\%OPTIONS,
	'help|h'	 => sub { USAGE(); },
	'version'	 => sub { VERSION_MESSAGE(); },
	'verbose|v+' => \$VERBOSE,
	'debug|d'	 => sub { $VERBOSE = 1; $DEBUG = 1; },
	'config-file|f=s' => \$config_file,
);

unless ($OPTIONS_VALID) {
	fail "Error in arguments.";
	USAGE(1);
}

sub USAGE {
	my $exitval = defined($_) ? $_ : 0;
	print <<EOF;
$COMMAND [-h|--help] [--version] [--verbose|-v] [--debug|-d]
    [--config-file|-f <path to config file>]

    --help, -h          : Print this help, then exit
    --version           : Print the script version, then exit
    --verbose, -v       : Enable verbose mode
    --debug, -d         : Enable debug mode

    --config-file, -f   : Alternate location for the configuration file
                          (Default: \$HOME/.dropsyncrc.yaml)
EOF
	exit $exitval;
}

sub VERSION_MESSAGE {
	say "This is ", BOLD, "$COMMAND", RESET, " v$VERSION.";
	print <<EOF;
Copyright (c) 2010 Guillaume-Jean Herbiet  (http://herbiet.net)
This is free software; see the source for copying conditions. There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
EOF
	exit 0;
}

#-----------------------------------------------------------------------------

#-----------------------------------------------------------------------------
# Core code
#

#
# Read configuration from the specified file
$config = read_config_file($config_file);
#

#
# dropsync folder location management
#
my $src_folder = setup_src_folder();

#
# Files backup/update
# TODO: implement actual backup/update of files
#
ohai "Syncing selected files." if $VERBOSE;
for my $file (@{$config->{'files'}}) {
	say $file if $DEBUG;
}

#-----------------------------------------------------------------------------

#-----------------------------------------------------------------------------
# Additional functions
#
sub read_config_file {
	my $file = shift;
	
	# Try to open the configuration file or die
	unless (-f $file) {
		fail "Configuration file $file does not exist!"; exit 2;
	} elsif ($VERBOSE) { ohai "Reading configuration from $file."; }

	# Read the configuration to a hash
	# NOTE: config_array and config_string should be empty
	my ($config_hash, $config_array, $config_string) = YAML::LoadFile($file);
	ohai "Read configuration:\n", Dumper($config_hash, $config_array, $config_string) if ($DEBUG);
	oops "Some unnamed variables were found while reading config file $_. They will be ignored."
		if (defined $config_array || defined $config_string);
	return $config_hash;
}

sub setup_src_folder {
	# Update the location of the Dropbox location
	# and the dropsync folder if required
	$dropbox_location = $config->{'dropbox_location'}
		if (exists $config->{'dropbox_location'} && !$config->{'dropbox_location'} eq "");
	$dropsync_folder = $config->{'dropsync_folder'}
		if (exists $config->{'dropsync_folder'} && !$config->{'dropsync_folder'} eq "");

	# Create the dropsync folder if required
	my $src = $dropbox_location."/".$dropsync_folder;
	unless (-d $src) {
		mkdir $src;
		ohai "Creating non-existing dropsync folder at $src."
			if $VERBOSE;
	}
	say "Using ", BOLD, "$src", RESET, " as source folder." if $VERBOSE;
	return $src;
}

#-----------------------------------------------------------------------------

